Once you have created a pattern, it seems a shame not to use it. The match operator =~ can
be used to match a string against a regular expression. If the pattern is found in the string,
=~ returns its starting position; otherwise, it returns nil. This means you can use regular
expressions as the condition in if and while statements. For example, the following code
fragment writes a message if a string contains the text Perl or Python:
if line =~ /Perl|Python/
puts "Scripting language mentioned: #{line}"
end
The part of a string matched by a regular expression can be replaced with different text
using one of Ruby’s substitution methods:
line.sub(/Perl/, 'Ruby')
# replace first 'Perl' with 'Ruby'
line.gsub(/Python/, 'Ruby') # replace every 'Python' with 'Ruby'
You can replace every occurrence of Perl and Python with Ruby using this:
line.gsub(/Perl|Python/, 'Ruby')
We’ll have a lot more to say about regular expressions as we go through the book.
